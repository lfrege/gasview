const MODE_START = 1;
const MODE_STR = 4;

firstWord = function(data)
{
	var i;
	for (i = 0; i < data.length; i++)
	{
		if (data[i] == ' ' || data[i] == '\n' || data[i] == '\t' | data[i] == '\r')
		{
			return data.substr(0, i);
		}
	}

	return data;
}

trimTrailing = function(data)
{
	var i, last = data.length;


	for (i = data.length - 1; i >= 0; i--)
	{
		if (data[i] == ' ' || data[i] == '\n' || data[i] == '\t' | data[i] == '\r')
		{
			last = i;
		}
		else
		{
			i = 0;
		}
	}

	if (last <= 0) { return ""; }

	return data.substr(0, last);
}

trimLeading = function(data)
{
	var i;
	for (i = 0; i < data.length; i++)
	{
		if (!(data[i] == ' ' || data[i] == '\n' || data[i] == '\t' | data[i] == '\r'))
		{
			return data.substr(i, data.length-i);
		}
	}

	return "";
}

trim = function(data)
{
	return trimLeading(trimTrailing(data));
}

getPieces = function(data, delim)
{
	var i, last = 0;
	var output = [];
	for (i = 0; i < data.length; i++)
	{
		if (data[i] == delim)
		{
			output.push(data.substr(last, i-last));
			last = i + 1;
		}
	}

	output.push(data.substr(last, i-last));
	return output;
}

firstN = function(input, limit)
{
	if (typeof(input) != 'string') { return ""; }

	else if (input.length < limit) { return input; }

	else {return input.substr(0,limit) + "..."; }
}

gasRow = function()
{
	this.label = "";
	this.inst = "";
	this.direct = "";
	this.comment = "";
	this.chunk = 0;
	this.opcode = "";

	this.tableRow = function()
	{
		return "<tr><td>" + firstN(this.label, 20) + "</td><td>" + firstN(this.inst, 30) + "</td><td>" + firstN(this.direct, 20) + "</td><td>" + firstN(this.comment, 20) + "</td></tr>";
	}

	this.clean = function()
	{
		this.label = trim(this.label);
		this.inst = trim(this.inst);
		this.direct = trim(this.direct);
		this.comment = trim(this.comment);
		this.opcode = firstWord(this.inst);
	}
}

parseGasRow = function(data)
{
	var output = new gasRow();
	var i;
	var mode = MODE_START;
	var temp = "";
	var directivefound = false;
	var oncomment = false;
	for (i = 0; i < data.length; i++)
	{
		if (mode == MODE_START)
		{
			if (data[i] == '"')
			{
				temp += data[i];
				mode = MODE_STR;
			}

			else if (data[i] == '\'')
			{
				temp += data[i];
				mode = MODE_STRS;
			}

			else if (data[i] == ':')
			{
				output.label = temp;
				temp = "";
				labelfound = true;
			}

			else if (data[i] == '.')
			{
				directivefound = true;
			}

			else if (data[i] == ';')
			{
				output.inst = temp;
				temp = "";
				oncomment = true;
			}

			else
			{
				temp += data[i];
			}
		}

		else if (mode == MODE_STR)
		{
			if (data[i] == '\\' && i+1 < data.length)
			{
				temp += data[i];
				i++;
				temp += data[i];
			}

			else if (data[i] == '"')
			{
				temp += data[i];
				mode = MODE_START;
			}

			else
			{
				temp += data[i];
			}
		}

		else if (mode == MODE_STRS)
		{
			if (data[i] == '\\' && i+1 < data.length)
			{
				temp += data[i];
				i++;
				temp += data[i];
			}

			else if (data[i] == '\'')
			{
				temp += data[i];
				mode = MODE_START;
			}

			else
			{
				temp += data[i];
			}
		}
	}

	if (oncomment)
	{
		output.comment += temp;
	}

	else if (directivefound)
	{
		output.direct += temp;
	}

	else
	{
		output.inst += temp;
	}

	output.clean();

	return output;
}

getOpCodeList = function(rows)
{
	var output = {};

	for (i = 0; i < rows.length; i++)
	{
		if (rows[i].inst != undefined && rows[i].inst.length > 2 && rows[i].inst.substr(0,4) != "Lset")
		{
			output[firstWord(rows[i].inst)] = true;
		}
	}

	return output;
}

pushDownLabels = function(rows)
{
	var output = [];
	var i;
	var temp = {};
	var chunk = 0;

	for (i = 0; i < rows.length; i++)
	{
		if (rows.length-1 > i && rows[i].label != "" && rows[i].inst == "" && rows[i].direct == "" && rows[i+1].label == "")
		{
			temp = new gasRow();
			temp.inst = rows[i+1].inst;
			temp.label = rows[i].label;
			temp.direct = rows[i+1].direct;
			temp.opcode = rows[i+1].opcode;
			temp.comment = rows[i].comment + " " + rows[i+1].comment;
			
			output.push(temp);
			i++;
		}
		else
		{
			output.push(rows[i])
		}

		output[output.length-1].chunk = chunk;

		if (output[output.length-1].opcode == 'ret' 
			|| output[output.length-1].opcode == 'jmp')
		{
			chunk++;
		}
		
	}

	return output;
}


eatGas = function(data)
{
	var rows = getPieces(data, '\n');
	var output = [];
	var i;
	for (i = 0; i < rows.length; i++)
	{
		output.push(parseGasRow(rows[i]));
	}

	return pushDownLabels(output);
}


module.exports.firstWord = firstWord;
module.exports.getOpCodeList = getOpCodeList;
module.exports.getPieces = getPieces;
module.exports.eatGas = eatGas;

